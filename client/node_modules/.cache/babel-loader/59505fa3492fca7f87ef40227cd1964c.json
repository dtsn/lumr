{"ast":null,"code":"import React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      validConfig: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('/api/discover/config', {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      this.setState({\n        loading: false,\n        validConfig: res.status === 200\n      });\n    });\n  }\n\n  render() {\n    if (this.state.loading === true) {\n      return 'Loading';\n    }\n\n    if (this.state.validConfig) {\n      return 'Valid Config';\n    }\n\n    if (!this.state.validConfig) {\n      return 'Invalid Config';\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danisaxi/Repositories/lumr/client/src/App.js"],"names":["React","App","Component","constructor","props","state","loading","validConfig","componentDidMount","fetch","headers","then","res","setState","status","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,sBAAD,EAAyB;AAC5BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADmB,KAAzB,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAI;AACX,WAAKC,QAAL,CAAc;AACZP,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,WAAW,EAAEK,GAAG,CAACE,MAAJ,KAAe;AAFhB,OAAd;AAID,KAVH;AAWD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKV,KAAL,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC/B,aAAO,SAAP;AACD;;AAED,QAAI,KAAKD,KAAL,CAAWE,WAAf,EAA4B;AAC1B,aAAO,cAAP;AACD;;AAED,QAAI,CAAC,KAAKF,KAAL,CAAWE,WAAhB,EAA6B;AAC3B,aAAO,gBAAP;AACD;AACF;;AApC+B;;AAwClC,eAAeN,GAAf","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      validConfig: false,\n    }\n  }\n\n  componentDidMount() {\n    fetch('/api/discover/config', {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        this.setState({\n          loading: false,\n          validConfig: res.status === 200,\n        });\n      })\n  }\n\n  render() {\n    if (this.state.loading === true) {\n      return 'Loading';\n    }\n\n    if (this.state.validConfig) {\n      return 'Valid Config';\n    }\n\n    if (!this.state.validConfig) {\n      return 'Invalid Config';\n    }\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}